plugins {
  id 'kotlin2js' version "1.3.40"
}

group 'org.pongasoft'
version '1.0.0'

repositories {
  mavenCentral()
}

def kotlinVersion = "1.3.40"

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
  testImplementation "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

compileKotlin2Js {
  kotlinOptions {
    moduleKind = "umd"
    sourceMap = true
  }
}

task assembleWeb(type: Sync) {
  configurations.compile.each { File file ->
    from(zipTree(file.absolutePath), {
      includeEmptyDirs = false
      include { fileTreeElement ->
        def path = fileTreeElement.path
        path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
            !path.startsWith("META-INF/"))
      }
    })
  }
  from compileKotlin2Js.destinationDir
  into "${buildDir}/web/dynamic/js"

  dependsOn classes
}

processResources {
  destinationDir file("${buildDir}/web/")
}

assemble.dependsOn assembleWeb

def webServerDockerImage = "$group/nginx/jamba-quickstart-frontend:$version"

/**
 * Runs docker build to build an nginx web server (see Dockerfile for config) to serve static pages and
 * acts as a proxy for avoiding CORS issue with downloading assets from github
 */
task webserverBuild(type: Exec) {
  workingDir file("webserver")
  commandLine(["docker", "build", "-t", webServerDockerImage, "."])
}

def webServerDockerContainer = "jamba-quickstart-frontend_webserver"

/**
 * Runs the web server
 */
task 'webserver-start'(dependsOn: [assemble, webserverBuild], type: Exec) {
  workingDir file("${buildDir}/web")
  commandLine(["docker", "run", "--rm", "--name", webServerDockerContainer, "-e", "TZ=America/Los_Angeles", "-p", "8080:80", "-v", "${buildDir.canonicalPath}/web:/usr/share/nginx/html:ro", webServerDockerImage])
}

/**
 * Stops the web server
 */
task 'webserver-stop'(type: Exec) {
  commandLine(["docker", "container", "rm", webServerDockerContainer])
}
